/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HarvestOption {
    pub f0_floor: f64,
    pub f0_ceil: f64,
    pub frame_period: f64,
}
#[test]
fn bindgen_test_layout_HarvestOption() {
    assert_eq!(
        ::std::mem::size_of::<HarvestOption>(),
        24usize,
        concat!("Size of: ", stringify!(HarvestOption))
    );
    assert_eq!(
        ::std::mem::align_of::<HarvestOption>(),
        8usize,
        concat!("Alignment of ", stringify!(HarvestOption))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HarvestOption>())).f0_floor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HarvestOption),
            "::",
            stringify!(f0_floor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HarvestOption>())).f0_ceil as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HarvestOption),
            "::",
            stringify!(f0_ceil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HarvestOption>())).frame_period as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HarvestOption),
            "::",
            stringify!(frame_period)
        )
    );
}
extern "C" {
    pub fn Harvest(
        x: *const f64,
        x_length: ::std::os::raw::c_int,
        fs: ::std::os::raw::c_int,
        option: *const HarvestOption,
        temporal_positions: *mut f64,
        f0: *mut f64,
    );
}
extern "C" {
    pub fn InitializeHarvestOption(option: *mut HarvestOption);
}
extern "C" {
    pub fn GetSamplesForHarvest(
        fs: ::std::os::raw::c_int,
        x_length: ::std::os::raw::c_int,
        frame_period: f64,
    ) -> ::std::os::raw::c_int;
}
